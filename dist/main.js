!function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";r.r(t);class n{constructor(e){this.grid=e,this.moves=0,this.winningCombos=[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[2,4,6],[0,4,8]],this.checkCombos=!1}isValidPosition(e){return"number"==typeof this.grid[e-1]}putMarkOnGrid(e,t){this.grid[t-1]=e}hasPlayerWon(e){return this.winningCombos.forEach(t=>{t.forEach(()=>{const r=t[0],n=t[1],i=t[2];this.grid[r]===e&&this.grid[n]===e&&this.grid[i]===e&&(this.checkCombos=!0)})}),this.checkCombos}gameIsATie(){return this.moves=0,this.grid.forEach(e=>{"string"==typeof e&&(this.moves+=1)}),9===this.moves&&!1===this.checkCombos}}class i{constructor(){this.player1="x",this.player2="o"}}class o{constructor(e){this.board=e,this.player=new i,this.grid=this.board.grid,this.player1=this.player.player1,this.player2=this.player.player2,this.currentPlayer=this.player1}makeMove(e,t){return!!this.board.isValidPosition(t)&&(this.board.putMarkOnGrid(e,t),!0)}canContinuePlaying(e){return!1===this.board.hasPlayerWon(e)&&!1===this.board.gameIsATie()}switchPlayer(){this.currentPlayer===this.player1?this.currentPlayer=this.player2:this.currentPlayer=this.player1}isTieOrIsWon(){return this.board.gameIsATie()?"It's a tie!":this.board.hasPlayerWon(this.currentPlayer)?this.currentPlayer+" wins!":""}}class s{constructor(e){this.game=e}togglePlayer(){this.game.switchPlayer()}canContinuePlaying(){return this.game.canContinuePlaying(this.game.currentPlayer)}isATieOrWon(){return this.game.isTieOrIsWon()}takeTurn(e){this.game.board.isValidPosition(e)&&this.canContinuePlaying()&&(this.game.makeMove(this.game.currentPlayer,e),this.canContinuePlaying()&&this.togglePlayer())}}let a,l,c;const u=document.getElementById("start-button"),d=document.getElementById("whos-playing"),h=document.getElementById("tie-or-win"),y=document.getElementById("player-grid"),m=["1","2","3","4","5","6","7","8","9"];const g=()=>{d.innerHTML="Make a move: "+c.game.currentPlayer},p=()=>{h.innerHTML=c.isATieOrWon()};y.addEventListener("click",(function(e){const t=e.target.id,r=parseInt(t);let n=document.getElementById(t);var i;parseInt(e.target.id)===r&&(!1===c.game.board.gameIsATie()&&!1===c.game.board.hasPlayerWon()&&(i=t,"x"===c.game.currentPlayer?document.getElementById(i).classList.add("player-one-move"):"o"===c.game.currentPlayer&&document.getElementById(i).classList.add("player-two-move"),c.takeTurn(r),n.innerHTML=a.grid[r-1]),g(),p())})),u.addEventListener("click",()=>{a=new n([1,2,3,4,5,6,7,8,9]),l=new o(a),c=new s(l),m.forEach((function(e){document.getElementById(e).innerHTML=""})),m.forEach((function(e){document.getElementById(e).classList.remove("player-one-move"),document.getElementById(e).classList.remove("player-two-move")})),g(),p()})}]);